#ifndef VIENNACL_DEVICE_SPECIFIC_CODE_GENERATOR_HPP
#define VIENNACL_DEVICE_SPECIFIC_CODE_GENERATOR_HPP

/* =========================================================================
   Copyright (c) 2010-2013, Institute for Microelectronics,
                            Institute for Analysis and Scientific Computing,
                            TU Wien.
   Portions of this software are copyright by UChicago Argonne, LLC.

                            -----------------
                  ViennaCL - The Vienna Computing Library
                            -----------------

   Project Head:    Karl Rupp                   rupp@iue.tuwien.ac.at

   (A list of authors and contributors can be found in the PDF manual)

   License:         MIT (X11), see file LICENSE in the base directory
============================================================================= */


/** @file viennacl/generator/generate.hpp
    @brief the user interface for the code generator
*/

#include <cstring>
#include <vector>
#include <typeinfo>

#include "viennacl/scheduler/forwards.h"
#include "viennacl/device_specific/forwards.h"

#include "viennacl/device_specific/autotuning/profiles.hpp"

#include "viennacl/device_specific/tree_parsing/statement_representation.hpp"
#include "viennacl/device_specific/tree_parsing/set_arguments.hpp"
#include "viennacl/device_specific/tree_parsing/map.hpp"

#include "viennacl/tools/tools.hpp"

namespace viennacl{

  namespace device_specific{


    /** @brief Class for handling code generation
     *
     *  It is meant to be only used along with the scheduler.*/
    class code_generator{
      public:
        /** @brief typedef of the key used in the forced profiles. Contains the expression type and the size of the scalartype */
      private:
        typedef std::list< std::pair<scheduler::statement, scheduler::statement_node> > statements_type;

        void init(){
            profile_->bind_statements(&statements_);
        }

      public:

        /** @brief The constructor */
        template<class T>
        code_generator(T const & profile, viennacl::ocl::context const & ctx = viennacl::ocl::current_context()) : profile_(new T(profile)), profile_provided_(true), ctx_(ctx)
        {
            init();
        }

        /** @brief The constructor */
        code_generator(expression_type type, expression_numeric_type numeric_type, viennacl::ocl::context const & ctx = viennacl::ocl::current_context()) : profile_(profiles::get(ctx.current_device(),type,numeric_type))
        , profile_provided_(false) , ctx_(ctx)
        {
            init();
        }

        ~code_generator()
        {
          if(profile_provided_)
            delete profile_;
        }

        /**
        *   @brief Add a statement and the root node to the expression list
        *   @return Whether or not the operation could be handled by the generator
        */
        bool add(scheduler::statement const & statement, scheduler::statement_node const & root_node)
        {
          statements_.push_back(std::make_pair(statement, root_node));
          return true;
        }

        /** @brief Set the arguments for a program previously generated by the generator and fills the kernels */
        void configure_program(viennacl::ocl::program & p, std::list<viennacl::ocl::kernel *> & kernels)
        {
          unsigned int kernel_id = 0;
          for(std::size_t i = 0 ; i < profile_->num_kernels() ; ++i){
            //add kernel name
            char str[32];
            std::sprintf(str,"kernel_%d",kernel_id);
            viennacl::ocl::kernel & kernel = p.get_kernel(str);
            kernels.push_back(&kernel);
            unsigned int current_arg = 0;
            //Configure ND Range and enqueue arguments
            profile_->configure_range_enqueue_arguments(i, kernel, current_arg);
            std::set<void *> memory;
            for(typename statements_type::const_iterator it = statements_.begin() ; it != statements_.end() ; ++it)
              tree_parsing::traverse(it->first, it->second, tree_parsing::set_arguments_functor(memory,current_arg,kernel));
            ++kernel_id;
          }
       }

        /** @brief Creates an identifier string for the set of expressions in the object */
        void make_program_name(char * program_name) const
        {
          unsigned int current_arg = 0;
          void* memory[64] = {NULL};
          for(std::list< std::pair<scheduler::statement, scheduler::statement_node> >::const_iterator it = statements_.begin() ; it != statements_.end() ; ++it)
              tree_parsing::traverse(it->first, it->second, tree_parsing::statement_representation_functor(memory, current_arg, program_name),true);
          *program_name='\0';
        }

        /** @brief Creates the OpenCL program string from the set of expressions in the object */
        std::string make_opencl_program_string()
        {
          utils::kernel_generation_stream stream;

          //Headers generation
          stream << "#if defined(cl_khr_fp64)\n";
          stream <<  "#  pragma OPENCL EXTENSION cl_khr_fp64: enable\n";
          stream <<  "#elif defined(cl_amd_fp64)\n";
          stream <<  "#  pragma OPENCL EXTENSION cl_amd_fp64: enable\n";
          stream <<  "#endif\n";
          stream << std::endl;

          (*profile_)(stream);

          return stream.str();
        }

        /** @brief Creates the CUDA device code from the set of expressions in the object
        *
        *   Performs just a direct translation...
        */
        std::string make_cuda_program_string()
        {
          //Creates OpenCL string with #ifdef and attributes
          utils::kernel_generation_stream stream;
          (*profile_)(stream);
          std::string res = stream.str();

          viennacl::tools::find_and_replace(res,"__attribute__","//__attribute__");

          //Pointer
          viennacl::tools::find_and_replace(res, "__global float*", "float*");
          viennacl::tools::find_and_replace(res, "__local float*", "float*");

          viennacl::tools::find_and_replace(res, "__global double*", "double*");
          viennacl::tools::find_and_replace(res, "__local double*", "double*");

          //Qualifiers
          viennacl::tools::find_and_replace(res,"__global","__device__");
          viennacl::tools::find_and_replace(res,"__kernel","__global__");
          viennacl::tools::find_and_replace(res,"__constant","__constant__");
          viennacl::tools::find_and_replace(res,"__local","__shared__");

          //Indexing
          viennacl::tools::find_and_replace(res,"get_num_groups(0)","gridDim.x");
          viennacl::tools::find_and_replace(res,"get_num_groups(1)","gridDim.y");

          viennacl::tools::find_and_replace(res,"get_local_size(0)","blockDim.x");
          viennacl::tools::find_and_replace(res,"get_local_size(1)","blockDim.y");

          viennacl::tools::find_and_replace(res,"get_group_id(0)","blockIdx.x");
          viennacl::tools::find_and_replace(res,"get_group_id(1)","blockIdx.y");

          viennacl::tools::find_and_replace(res,"get_local_id(0)","threadIdx.x");
          viennacl::tools::find_and_replace(res,"get_local_id(1)","threadIdx.y");

          viennacl::tools::find_and_replace(res,"get_global_id(0)","(blockIdx.x*blockDim.x + threadIdx.x)");
          viennacl::tools::find_and_replace(res,"get_global_id(1)","(blockIdx.y*blockDim.y + threadIdx.y)");

          //Synchronization
          viennacl::tools::find_and_replace(res,"barrier(CLK_LOCAL_MEM_FENCE)","__syncthreads()");
          viennacl::tools::find_and_replace(res,"barrier(CLK_GLOBAL_MEM_FENCE)","__syncthreads()");


          return res;
        }

      private:
        profile_base * profile_;
        bool profile_provided_;

        statements_type statements_;
        viennacl::ocl::context const & ctx_;
    };

    /** @brief Creates the program associated with a generator object and fills the kernels. Checks the context for the program and possibly (re)compile it.
    *
    *   @param generator the generator to work on
    *   @param kernels this list will be filled with the kernels associated with the generator
    *   @param force_recompilation if true, the program will be recompiled
    */
    inline viennacl::ocl::program & get_configured_program(viennacl::device_specific::code_generator & generator, std::list<viennacl::ocl::kernel*> & kernels, bool force_recompilation = false){
      std::vector<char> program_name_vector(256);
      char* program_name = program_name_vector.data();
      generator.make_program_name(program_name);
      if(force_recompilation)
        viennacl::ocl::current_context().delete_program(program_name);
      if(!viennacl::ocl::current_context().has_program(program_name)){
        std::string source_code = generator.make_opencl_program_string();
    #ifdef VIENNACL_DEBUG_BUILD
        std::cout << "Building " << program_name << "..." << std::endl;
        std::cout << source_code << std::endl;
    #endif
        viennacl::ocl::current_context().add_program(source_code, program_name);
      }
      viennacl::ocl::program & p = viennacl::ocl::current_context().get_program(program_name);
      generator.configure_program(p, kernels);
      return p;
    }

    /** @brief Set the arguments and enqueue a generator object */
    inline void enqueue(viennacl::device_specific::code_generator & generator, bool force_recompilation = false){
      std::list<viennacl::ocl::kernel*> kernels;
      get_configured_program(generator, kernels, force_recompilation);
      for(std::list<viennacl::ocl::kernel*>::iterator it = kernels.begin() ; it != kernels.end() ; ++it){
        viennacl::ocl::enqueue(**it, (*it)->context().get_queue());
      }
    }

    /** @brief Generate and enqueue a statement+root_node into the current queue */
    inline void generate_enqueue_statement(expression_type type, expression_numeric_type numeric_type, viennacl::scheduler::statement const & s, scheduler::statement_node const & root_node){
      device_specific::code_generator generator(type, numeric_type);
      generator.add(s,root_node);
      viennacl::device_specific::enqueue(generator);
    }

    /** @brief Generate and enqueue a statement into the current queue, assumes the root_node is the first node of the statement */
    inline void generate_enqueue_statement(expression_type type, expression_numeric_type numeric_type, viennacl::scheduler::statement const & s){
      generate_enqueue_statement(type, numeric_type, s, s.array()[0]);
    }

  }
}
#endif
